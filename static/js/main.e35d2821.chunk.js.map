{"version":3,"sources":["components/LoginForm.jsx","components/MessageForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","App.js","index.js"],"names":["LoginForm","useState","username","setUsername","password","setPassword","error","setError","handleSubmit","e","a","preventDefault","authObject","axios","get","headers","localStorage","setItem","window","location","reload","className","onSubmit","type","value","onChange","target","placeholder","required","align","MessageForm","props","setValue","chatId","creds","event","text","trim","length","sendMessage","isTyping","htmlFor","PictureOutlined","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","backgroundImage","avatar","marginLeft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","renderMessages","keys","Object","key","lastMessageKey","width","title","height","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","reactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e35d2821.chunk.js","sourcesContent":["import { useState } from 'react'\nimport axios from 'axios'\n\n\nconst LoginForm = () => {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState('')\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const authObject = { 'Project-ID':\"3798591d-4c30-4094-a425-6e999ab2369b\", 'User-Name': username, 'User-Secret': password };\n        \n        try {\n            \n            await axios.get('https://api.chatengine.io/chats', { headers: authObject });\n\n            localStorage.setItem('username', username);\n            localStorage.setItem('password', password);\n\n            window.location.reload();\n        } catch (error){\n            setError('Oops, inccorect credentials');\n        }\n      \n        \n    \n    }\n \n    return(\n        <div className=\"wrapper\">\n            <div className=\"form\">\n                <h1 className='title'>Chat Application</h1>\n                <form onSubmit={handleSubmit}>\n                    <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} className='input' placeholder='Usename' required/>\n                    <input type=\"text\" value={password} onChange={(e) => setPassword(e.target.value)} className='input' placeholder='Password' required/>\n                    <div align='center'>\n                        <button type='submit' className='button'>\n                            <span>Start Chatting</span>\n                        </button>\n                    </div>\n                    <h2 className='error'>{error}</h2>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default LoginForm;","import {　useState　} from 'react';\nimport { sendMessage, isTyping } from 'react-chat-engine';\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\n\n\n\nconst MessageForm = (props) =>{\n    const[value, setValue] = useState('');\n    const { chatId, creds } = props;\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n\n        const text = value.trim();\n\n        if(text.length > 0) sendMessage(creds, chatId, { text });\n\n        setValue('');\n\n    }\n\n    const handleChange = (event) => {\n        setValue(event.target.value);\n\n        isTyping(props, chatId);\n    }\n\n    const handleUpload = (event) => {\n        sendMessage(creds, chatId, { files: event.target.files, text: ''})\n    }\n\n    return(\n        <form className=\"message-form\" onSubmit={handleSubmit}>\n            <input\n            className='message-input'\n            placeholder='Send a message...'\n            value={value}\n            onChange={handleChange}\n            onSubmit={handleSubmit}\n            />\n\n            <label htmlFor='unload-button'>\n                <span className='image-button'>\n                    <PictureOutlined className='picture-icon' />\n                </span>\n            </label>\n            <input\n                type='file'\n                multiple={false}\n                id='unload-button'\n                style={{ display:'none' }}\n                onChange={handleUpload}\n            />\n            <button type='submit' className='send-button'>\n                <SendOutlined className='send-icon' />\n            </button>\n        </form>\n    )\n\n}\n\nexport default MessageForm;","const MyMessage = ({ message }) => {\n    if(message?.attachments?.length > 0) {\n        return(\n            <img\n                src={message.attachments[0].file}\n                alt='message-attachent'\n                className='message-image'\n                style={{ float: 'right' }}\n            />\n        )\n    }\n    \n\n    return(\n        <div className='message' style={{ float: 'right', marginRight:'18px', color:'white', backgroundColor:'#3B2A50'}}>\n            {message.text}\n        </div>\n    );\n}\n\nexport default MyMessage;","const TheirMessage = ({ lastMessage, message }) => {\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username\n    return(\n        <div className=\"message-row\">\n            {isFirstMessageByUser && (\n                <div \n                    className=\"message-avatar\"\n                    style={{backgroundImage: `url(${message?.sender?.avatar})`}}\n                />\n            )}\n            {message?.attachments?.length > 0\n                ?(\n                    <img\n                            src={message.attachments[0].file}\n                            alt='message-attachent'\n                            className='message-image'\n                            style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }}\n                    />\n                ) : (\n                    <div className='message' style={{ float: 'left', backgroundColor:'#CABCDC', marginLeft: isFirstMessageByUser ? '4px' : '48px'}}>\n                        {message.text}\n                    </div>\n                )\n            }\n        </div>\n    );\n}\n\n\nexport default TheirMessage;","import MessageForm from './MessageForm';\nimport MyMessage from './MyMessage';\nimport TheirMessage from './TheirMessage';\n\n\nconst ChatFeed = (props) => {\n    const { chats, activeChat, userName, messages } = props;\n\n    const chat = chats && chats[activeChat];\n\n    const renderReadReceipts = (message, isMyMessage) => {\n        return chat.people.map((person, index) => person.last_read === message.id &&(\n            <div \n                key={`read_${index}`}\n                className='read-receipt'\n                style={{\n                    float: isMyMessage ? 'right' : 'left',\n                    backgroundImage: `url(${person?.person?.avatar})`\n                }}\n            />\n        ))\n    }\n\n    const renderMessages = () => {\n        const keys = Object.keys(messages);\n\n        return keys.map((key, index) => {\n            const message = messages[key];\n            const lastMessageKey = index === 0 ? null :keys[index -1];\n            const isMyMessage = userName === message.sender.username;\n\n            return(\n                <div key={`msg_${index}`} style={{width: '100%' }}>\n                    <div className=\"message-block\">\n                        {\n                            isMyMessage\n                            ?<MyMessage message={message}/>\n                            : <TheirMessage message={message} lastMessage={messages[lastMessageKey]}/>\n                        }\n                    </div>\n                    <div className=\"read-receipts\" style={{ marginRight: isMyMessage? '18px' : '0px', marginLeft: isMyMessage? '0px' : '68px' }}>\n                        {renderReadReceipts(message, isMyMessage)}\n                    </div>\n\n                </div>\n            )\n        })\n    }\n\n    renderMessages();\n\n    \n    if(!chat) return 'Loading...';\n\n\n    return(\n        <div className=\"chat-feed\">\n            <div className=\"chat-title-container\">\n                <div className=\"chat-title\">{chat?.title}</div>\n                <div className=\"chat-subtitle\">\n                    {chat.people.map((person)=> `${person.person.username}`)}\n                </div>\n            </div>\n            {renderMessages()}\n            <div style={{ height: '100px' }}/>\n            <div className=\"message-form-container\">\n                <MessageForm {...props} chatId={activeChat} />\n            </div>\n        </div>\n    )\n\n}\n\nexport default ChatFeed;","import './App.css';\nimport LoginForm from \"./components/LoginForm\";\nimport { ChatEngine } from 'react-chat-engine';\nimport ChatFeed from './components/ChatFeed';\n\nfunction App() {\n  if(!localStorage.getItem('username')) return <LoginForm />  //if youre not login\n  return (\n     <ChatEngine \n         height=\"100vh\"\n         projectID=\"3798591d-4c30-4094-a425-6e999ab2369b\"\n         userName={localStorage.getItem('username')}\n         userSecret={localStorage.getItem('password')}\n         renderChatFeed={(chatAppProps)=><ChatFeed {...chatAppProps} />}\n     />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport reactDOM from \"react-dom\"\n\nimport App from './App'\n\nreactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}